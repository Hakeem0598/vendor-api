name: 'Terraform action'
on:
    push:
        branches:
            - main
    pull_request:
permissions:
    id-token: write # This is required for aws oidc connections
    contents: read # This is required for actions/checkout
    pull-requests: write # This is required for gh bot to comment PR
jobs:
    deploy:
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: bash
                working-directory: .
        steps:
            - name: Git checkout
              uses: actions/checkout@v3

            - name: Configure AWS credentials from AWS account
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
                  role-session-name: ${{ secrets.AWS_OIDC_ROLE_SESSION_NAME }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Create connect ECR repository
              uses: int128/create-ecr-repository-action@v1
              with:
                  repository: ${{ secrets.AWS_ECR_NAME_CONNECT }}

            - name: Build, tag, and push docker image to Amazon ECR
              env:
                  REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  REPOSITORY: ${{ secrets.AWS_ECR_NAME_CONNECT }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --target $REPOSITORY .
                  docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

            - name: Create disconnect ECR repository
              uses: int128/create-ecr-repository-action@v1
              with:
                  repository: ${{ secrets.AWS_ECR_NAME_DISCONNECT }}

            - name: Build, tag, and push docker image to Amazon ECR
              env:
                  REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  REPOSITORY: ${{ secrets.AWS_ECR_NAME_DISCONNECT }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --target $REPOSITORY .
                  docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

            - name: Create sendvendor ECR repository
              uses: int128/create-ecr-repository-action@v1
              id: sendvendor-ecr
              with:
                  repository: ${{ secrets.AWS_ECR_NAME_SENDVENDOR }}

            - name: Build, tag, and push sendvendor image to Amazon ECR
              env:
                  REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
                  REPOSITORY: ${{ secrets.AWS_ECR_NAME_SENDVENDOR }}
              run: |
                  docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --target $REPOSITORY .
                  docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

            - name: Create getvendors ECR repository
              uses: int128/create-ecr-repository-action@v1
              with:
                  repository: ${{ secrets.AWS_ECR_NAME_GETVENDORS }}

            - name: Build, tag, and push getvendors image to Amazon ECR
              env:
                  REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
                  REPOSITORY: ${{ secrets.AWS_ECR_NAME_GETVENDORS }}
              run: |
                  docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --target $REPOSITORY .
                  docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                  terraform_version: 1.2.5

            - name: Terraform fmt
              id: fmt
              working-directory: ./terraform
              run: terraform fmt -check
              continue-on-error: true

            - name: Terraform Init
              id: init
              working-directory: ./terraform
              env:
                  AWS_BUCKET_NAME: ${{ secrets.AWS_TFSTATE_BUCKET_NAME }}
                  AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_TFSTATE_KEY_NAME }}
                  AWS_REGION: ${{ secrets.AWS_REGION }}
              run: >
                  terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" 
                  -backend-config="key=${AWS_BUCKET_KEY_NAME}" 
                  -backend-config="region=${AWS_REGION}"

            - name: Terraform Validate
              id: validate
              run: terraform validate -no-color
              working-directory: ./terraform

            - name: Terraform Plan
              id: plan
              working-directory: ./terraform
              run: terraform plan -no-color
              if: github.event_name == 'pull_request'

            - name: Terraform Run
              id: run
              uses: actions/github-script@v6
              if: github.event_name == 'pull_request'
              env:
                  PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                      #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                      #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                      <details><summary>Validation Output</summary>
                      \`\`\`\n
                      ${{ steps.validate.outputs.stdout }}
                      \`\`\`

                      </details>

                      #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                      <details><summary>Show Plan</summary>

                      \`\`\`\n
                      ${process.env.PLAN}
                      \`\`\`

                      </details>

                      *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: output
                      })

            - name: Terraform Plan Status
              id: status
              working-directory: ./terraform
              if: steps.plan.outcome == 'failure'
              run: exit 1

            - name: Terraform Apply
              id: apply
              working-directory: ./terraform
              if: github.ref == 'refs/heads/main' && github.event_name == 'push'
              run: terraform apply -auto-approve -input=false
              env:
                  TF_VAR_image_tag: ${{ github.sha }}
                  TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
